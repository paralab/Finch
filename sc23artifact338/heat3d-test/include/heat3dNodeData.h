//This file was generated by Finch.

/*

*/
#pragma once

#include <exception>
#include <assert.h>
#include <DataTypes.h>
#include <talyfem/talyfem.h>

class heat3dNodeData {
    public:
    // number of  variables in this NodeData
    static const unsigned int NUM_VARS = 1;
    // values available to equation
    double var_values[2];
    
    heat3dNodeData() {
        std::memset(var_values, 0, sizeof(DENDRITE_REAL) * 2);
    }
    
    enum Vars : int {
        u_1_dofind = 0,
        prev2_u_1_dofind = 1,
        heat3dNODEDATA_MAX = 2

    };

    /**
        * Returns reference to the given value in the object
        *
        * @param index the index of the desired item
        * @return reference to the desired data item
        */
    double &value(int index) {
        switch (index) {
            case u_1_dofind: return var_values[0];
            case prev2_u_1_dofind: return var_values[1];

            default: throw std::runtime_error("Invalid heat3dNodeData index");
        }
    }

    inline double value(int index) const {
        return const_cast<heat3dNodeData *>(this)->value(index);
    }

    /**
        * Returns the name of the given data value in the object
        * @param index the index of the desired item
        * @return name of the specified data item
        */
    static const char *name(int index) {
        switch (index) {
            case u_1_dofind: return "u_1";
            case prev2_u_1_dofind: return "prev2_u_1";

            default: throw std::runtime_error("Invalid heat3dNodeData index");
        }
    }

    /**
        * Returns the number of the data items in the object
        * @return number of the data items in the object
        */
    static int valueno() {
        return heat3dNODEDATA_MAX; // Should this be num_dofs instead???
    }
};
  

