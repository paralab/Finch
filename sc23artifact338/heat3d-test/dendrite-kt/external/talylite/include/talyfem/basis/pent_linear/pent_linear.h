/*
  Copyright 2014-2016 Baskar Ganapathysubramanian

  This file is part of TALYFem.

  TALYFem is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 2.1 of the
  License, or (at your option) any later version.

  TALYFem is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with TALYFem.  If not, see <http://www.gnu.org/licenses/>.
*/
// --- end license text --- //
#pragma once

#include <talyfem/grid/zeroptv.h>
#include <talyfem/basis/itg_pts/itg_pts.h>
#include <talyfem/utils/timers.h>
#include <iostream>
#include <iomanip>

namespace TALYFEMLIB {

/**
 * Implementation for linear basis function for pentatope elements.
 */
template <int surface_id = 0, int rel_order = 0>
class PentLinearBasis {
 public:
  static constexpr int nsd = 4;  ///< number of spatial dimensions
  static constexpr int nbf = 5;  ///< number of shape functions
  static constexpr int nbf_per_node = 1;  ///< shape funcs per node
  static constexpr double jacobian_scale = 1.0;
  static constexpr int n_itg_pts = PentItgPts<2 + rel_order, surface_id>::n_itg_pts;

  /**
   * Helper function to grab the ith integration point.
   * @param i integration point index (should be in the range 0..n_itg_pts)
   * @returns integration point i
   */
  static constexpr ZEROPTV itg_pts(int i) { 
     return PentItgPts<2 + rel_order, surface_id>::itg_pts[i];
  }

  /**
   * Helper function to grab the ith integration point's weight.
   * @param i integration point index (should be in the range 0..n_itg_pts)
   * @returns the weight for integration point i
   */
  static constexpr double weights(int i) { 
    return PentItgPts<2 + rel_order, surface_id>::weights[i];
  }

  /**
   * Calculate using cached values for N, dNde, d2Nde.
   * Must exist for FEMElm to work.
   * @param itg_pt index of integration point
   * @param elem element to calculate values for
   * @param flags flags defining what values must be calculated
   * @param[out] vals output
   */
  static void calc_values(int itg_pt, const ElemNodes& elem_orig,
                          unsigned int flags, BasisValues<nbf, nsd>* vals,
                          Matrix3& rotation_matrix, ElemNodes& elem_cache) {


    calc_values(itg_pts(itg_pt), elem_orig, flags, vals);
  }

  /**
   * Calculates the determinant of a 4x4 matrix by formula. This is here because
   * it turns out to be faster than the MatrixUtils so is implemented directly
   * here.
   * @param a 4x4 array of matrix data to calculate the determinant of
   */
  static double calc_det4x4(const double (&a)[4][4]) {
    return (a[0][0]*a[1][1]*a[2][2]*a[3][3] - a[0][0]*a[1][1]*a[2][3]*a[3][2] - a[0][0]*a[1][2]*a[2][1]*a[3][3] + a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][1]*a[1][0]*a[2][2]*a[3][3] + a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][1]*a[1][2]*a[2][0]*a[3][3] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][1]*a[1][3]*a[2][2]*a[3][0] + a[0][2]*a[1][0]*a[2][1]*a[3][3] - a[0][2]*a[1][0]*a[2][3]*a[3][1] - a[0][2]*a[1][1]*a[2][0]*a[3][3] + a[0][2]*a[1][1]*a[2][3]*a[3][0] + a[0][2]*a[1][3]*a[2][0]*a[3][1] - a[0][2]*a[1][3]*a[2][1]*a[3][0] - a[0][3]*a[1][0]*a[2][1]*a[3][2] + a[0][3]*a[1][0]*a[2][2]*a[3][1] + a[0][3]*a[1][1]*a[2][0]*a[3][2] - a[0][3]*a[1][1]*a[2][2]*a[3][0] - a[0][3]*a[1][2]*a[2][0]*a[3][1] + a[0][3]*a[1][2]*a[2][1]*a[3][0]);
  }

  /**
   * Calculates the inverse of a 5x5 matrix. It does this by computing the 
   * cofactor-transpose matrix and determinant separately. 
   */
  static double calc_inv5x5(const double (&a)[5][5], double& det_out, double (&cof_out)[5][5]) {
    det_out = (a[0][0]*a[1][1]*a[2][2]*a[3][3]*a[4][4] - a[0][0]*a[1][1]*a[2][2]*a[3][4]*a[4][3] - a[0][0]*a[1][1]*a[2][3]*a[3][2]*a[4][4] + a[0][0]*a[1][1]*a[2][3]*a[3][4]*a[4][2] + a[0][0]*a[1][1]*a[2][4]*a[3][2]*a[4][3] - a[0][0]*a[1][1]*a[2][4]*a[3][3]*a[4][2] - a[0][0]*a[1][2]*a[2][1]*a[3][3]*a[4][4] + a[0][0]*a[1][2]*a[2][1]*a[3][4]*a[4][3] + a[0][0]*a[1][2]*a[2][3]*a[3][1]*a[4][4] - a[0][0]*a[1][2]*a[2][3]*a[3][4]*a[4][1] - a[0][0]*a[1][2]*a[2][4]*a[3][1]*a[4][3] + a[0][0]*a[1][2]*a[2][4]*a[3][3]*a[4][1] + a[0][0]*a[1][3]*a[2][1]*a[3][2]*a[4][4] - a[0][0]*a[1][3]*a[2][1]*a[3][4]*a[4][2] - a[0][0]*a[1][3]*a[2][2]*a[3][1]*a[4][4] + a[0][0]*a[1][3]*a[2][2]*a[3][4]*a[4][1] + a[0][0]*a[1][3]*a[2][4]*a[3][1]*a[4][2] - a[0][0]*a[1][3]*a[2][4]*a[3][2]*a[4][1] - a[0][0]*a[1][4]*a[2][1]*a[3][2]*a[4][3] + a[0][0]*a[1][4]*a[2][1]*a[3][3]*a[4][2] + a[0][0]*a[1][4]*a[2][2]*a[3][1]*a[4][3] - a[0][0]*a[1][4]*a[2][2]*a[3][3]*a[4][1] - a[0][0]*a[1][4]*a[2][3]*a[3][1]*a[4][2] + a[0][0]*a[1][4]*a[2][3]*a[3][2]*a[4][1] - a[0][1]*a[1][0]*a[2][2]*a[3][3]*a[4][4] + a[0][1]*a[1][0]*a[2][2]*a[3][4]*a[4][3] + a[0][1]*a[1][0]*a[2][3]*a[3][2]*a[4][4] - a[0][1]*a[1][0]*a[2][3]*a[3][4]*a[4][2] - a[0][1]*a[1][0]*a[2][4]*a[3][2]*a[4][3] + a[0][1]*a[1][0]*a[2][4]*a[3][3]*a[4][2] + a[0][1]*a[1][2]*a[2][0]*a[3][3]*a[4][4] - a[0][1]*a[1][2]*a[2][0]*a[3][4]*a[4][3] - a[0][1]*a[1][2]*a[2][3]*a[3][0]*a[4][4] + a[0][1]*a[1][2]*a[2][3]*a[3][4]*a[4][0] + a[0][1]*a[1][2]*a[2][4]*a[3][0]*a[4][3] - a[0][1]*a[1][2]*a[2][4]*a[3][3]*a[4][0] - a[0][1]*a[1][3]*a[2][0]*a[3][2]*a[4][4] + a[0][1]*a[1][3]*a[2][0]*a[3][4]*a[4][2] + a[0][1]*a[1][3]*a[2][2]*a[3][0]*a[4][4] - a[0][1]*a[1][3]*a[2][2]*a[3][4]*a[4][0] - a[0][1]*a[1][3]*a[2][4]*a[3][0]*a[4][2] + a[0][1]*a[1][3]*a[2][4]*a[3][2]*a[4][0] + a[0][1]*a[1][4]*a[2][0]*a[3][2]*a[4][3] - a[0][1]*a[1][4]*a[2][0]*a[3][3]*a[4][2] - a[0][1]*a[1][4]*a[2][2]*a[3][0]*a[4][3] + a[0][1]*a[1][4]*a[2][2]*a[3][3]*a[4][0] + a[0][1]*a[1][4]*a[2][3]*a[3][0]*a[4][2] - a[0][1]*a[1][4]*a[2][3]*a[3][2]*a[4][0] + a[0][2]*a[1][0]*a[2][1]*a[3][3]*a[4][4] - a[0][2]*a[1][0]*a[2][1]*a[3][4]*a[4][3] - a[0][2]*a[1][0]*a[2][3]*a[3][1]*a[4][4] + a[0][2]*a[1][0]*a[2][3]*a[3][4]*a[4][1] + a[0][2]*a[1][0]*a[2][4]*a[3][1]*a[4][3] - a[0][2]*a[1][0]*a[2][4]*a[3][3]*a[4][1] - a[0][2]*a[1][1]*a[2][0]*a[3][3]*a[4][4] + a[0][2]*a[1][1]*a[2][0]*a[3][4]*a[4][3] + a[0][2]*a[1][1]*a[2][3]*a[3][0]*a[4][4] - a[0][2]*a[1][1]*a[2][3]*a[3][4]*a[4][0] - a[0][2]*a[1][1]*a[2][4]*a[3][0]*a[4][3] + a[0][2]*a[1][1]*a[2][4]*a[3][3]*a[4][0] + a[0][2]*a[1][3]*a[2][0]*a[3][1]*a[4][4] - a[0][2]*a[1][3]*a[2][0]*a[3][4]*a[4][1] - a[0][2]*a[1][3]*a[2][1]*a[3][0]*a[4][4] + a[0][2]*a[1][3]*a[2][1]*a[3][4]*a[4][0] + a[0][2]*a[1][3]*a[2][4]*a[3][0]*a[4][1] - a[0][2]*a[1][3]*a[2][4]*a[3][1]*a[4][0] - a[0][2]*a[1][4]*a[2][0]*a[3][1]*a[4][3] + a[0][2]*a[1][4]*a[2][0]*a[3][3]*a[4][1] + a[0][2]*a[1][4]*a[2][1]*a[3][0]*a[4][3] - a[0][2]*a[1][4]*a[2][1]*a[3][3]*a[4][0] - a[0][2]*a[1][4]*a[2][3]*a[3][0]*a[4][1] + a[0][2]*a[1][4]*a[2][3]*a[3][1]*a[4][0] - a[0][3]*a[1][0]*a[2][1]*a[3][2]*a[4][4] + a[0][3]*a[1][0]*a[2][1]*a[3][4]*a[4][2] + a[0][3]*a[1][0]*a[2][2]*a[3][1]*a[4][4] - a[0][3]*a[1][0]*a[2][2]*a[3][4]*a[4][1] - a[0][3]*a[1][0]*a[2][4]*a[3][1]*a[4][2] + a[0][3]*a[1][0]*a[2][4]*a[3][2]*a[4][1] + a[0][3]*a[1][1]*a[2][0]*a[3][2]*a[4][4] - a[0][3]*a[1][1]*a[2][0]*a[3][4]*a[4][2] - a[0][3]*a[1][1]*a[2][2]*a[3][0]*a[4][4] + a[0][3]*a[1][1]*a[2][2]*a[3][4]*a[4][0] + a[0][3]*a[1][1]*a[2][4]*a[3][0]*a[4][2] - a[0][3]*a[1][1]*a[2][4]*a[3][2]*a[4][0] - a[0][3]*a[1][2]*a[2][0]*a[3][1]*a[4][4] + a[0][3]*a[1][2]*a[2][0]*a[3][4]*a[4][1] + a[0][3]*a[1][2]*a[2][1]*a[3][0]*a[4][4] - a[0][3]*a[1][2]*a[2][1]*a[3][4]*a[4][0] - a[0][3]*a[1][2]*a[2][4]*a[3][0]*a[4][1] + a[0][3]*a[1][2]*a[2][4]*a[3][1]*a[4][0] + a[0][3]*a[1][4]*a[2][0]*a[3][1]*a[4][2] - a[0][3]*a[1][4]*a[2][0]*a[3][2]*a[4][1] - a[0][3]*a[1][4]*a[2][1]*a[3][0]*a[4][2] + a[0][3]*a[1][4]*a[2][1]*a[3][2]*a[4][0] + a[0][3]*a[1][4]*a[2][2]*a[3][0]*a[4][1] - a[0][3]*a[1][4]*a[2][2]*a[3][1]*a[4][0] + a[0][4]*a[1][0]*a[2][1]*a[3][2]*a[4][3] - a[0][4]*a[1][0]*a[2][1]*a[3][3]*a[4][2] - a[0][4]*a[1][0]*a[2][2]*a[3][1]*a[4][3] + a[0][4]*a[1][0]*a[2][2]*a[3][3]*a[4][1] + a[0][4]*a[1][0]*a[2][3]*a[3][1]*a[4][2] - a[0][4]*a[1][0]*a[2][3]*a[3][2]*a[4][1] - a[0][4]*a[1][1]*a[2][0]*a[3][2]*a[4][3] + a[0][4]*a[1][1]*a[2][0]*a[3][3]*a[4][2] + a[0][4]*a[1][1]*a[2][2]*a[3][0]*a[4][3] - a[0][4]*a[1][1]*a[2][2]*a[3][3]*a[4][0] - a[0][4]*a[1][1]*a[2][3]*a[3][0]*a[4][2] + a[0][4]*a[1][1]*a[2][3]*a[3][2]*a[4][0] + a[0][4]*a[1][2]*a[2][0]*a[3][1]*a[4][3] - a[0][4]*a[1][2]*a[2][0]*a[3][3]*a[4][1] - a[0][4]*a[1][2]*a[2][1]*a[3][0]*a[4][3] + a[0][4]*a[1][2]*a[2][1]*a[3][3]*a[4][0] + a[0][4]*a[1][2]*a[2][3]*a[3][0]*a[4][1] - a[0][4]*a[1][2]*a[2][3]*a[3][1]*a[4][0] - a[0][4]*a[1][3]*a[2][0]*a[3][1]*a[4][2] + a[0][4]*a[1][3]*a[2][0]*a[3][2]*a[4][1] + a[0][4]*a[1][3]*a[2][1]*a[3][0]*a[4][2] - a[0][4]*a[1][3]*a[2][1]*a[3][2]*a[4][0] - a[0][4]*a[1][3]*a[2][2]*a[3][0]*a[4][1] + a[0][4]*a[1][3]*a[2][2]*a[3][1]*a[4][0]);
    cof_out[0][0] = (a[1][1]*a[2][2]*a[3][3]*a[4][4] - a[1][1]*a[2][2]*a[3][4]*a[4][3] - a[1][1]*a[2][3]*a[3][2]*a[4][4] + a[1][1]*a[2][3]*a[3][4]*a[4][2] + a[1][1]*a[2][4]*a[3][2]*a[4][3] - a[1][1]*a[2][4]*a[3][3]*a[4][2] - a[1][2]*a[2][1]*a[3][3]*a[4][4] + a[1][2]*a[2][1]*a[3][4]*a[4][3] + a[1][2]*a[2][3]*a[3][1]*a[4][4] - a[1][2]*a[2][3]*a[3][4]*a[4][1] - a[1][2]*a[2][4]*a[3][1]*a[4][3] + a[1][2]*a[2][4]*a[3][3]*a[4][1] + a[1][3]*a[2][1]*a[3][2]*a[4][4] - a[1][3]*a[2][1]*a[3][4]*a[4][2] - a[1][3]*a[2][2]*a[3][1]*a[4][4] + a[1][3]*a[2][2]*a[3][4]*a[4][1] + a[1][3]*a[2][4]*a[3][1]*a[4][2] - a[1][3]*a[2][4]*a[3][2]*a[4][1] - a[1][4]*a[2][1]*a[3][2]*a[4][3] + a[1][4]*a[2][1]*a[3][3]*a[4][2] + a[1][4]*a[2][2]*a[3][1]*a[4][3] - a[1][4]*a[2][2]*a[3][3]*a[4][1] - a[1][4]*a[2][3]*a[3][1]*a[4][2] + a[1][4]*a[2][3]*a[3][2]*a[4][1]);
    cof_out[0][1] = -(a[0][1]*a[2][2]*a[3][3]*a[4][4] - a[0][1]*a[2][2]*a[3][4]*a[4][3] - a[0][1]*a[2][3]*a[3][2]*a[4][4] + a[0][1]*a[2][3]*a[3][4]*a[4][2] + a[0][1]*a[2][4]*a[3][2]*a[4][3] - a[0][1]*a[2][4]*a[3][3]*a[4][2] - a[0][2]*a[2][1]*a[3][3]*a[4][4] + a[0][2]*a[2][1]*a[3][4]*a[4][3] + a[0][2]*a[2][3]*a[3][1]*a[4][4] - a[0][2]*a[2][3]*a[3][4]*a[4][1] - a[0][2]*a[2][4]*a[3][1]*a[4][3] + a[0][2]*a[2][4]*a[3][3]*a[4][1] + a[0][3]*a[2][1]*a[3][2]*a[4][4] - a[0][3]*a[2][1]*a[3][4]*a[4][2] - a[0][3]*a[2][2]*a[3][1]*a[4][4] + a[0][3]*a[2][2]*a[3][4]*a[4][1] + a[0][3]*a[2][4]*a[3][1]*a[4][2] - a[0][3]*a[2][4]*a[3][2]*a[4][1] - a[0][4]*a[2][1]*a[3][2]*a[4][3] + a[0][4]*a[2][1]*a[3][3]*a[4][2] + a[0][4]*a[2][2]*a[3][1]*a[4][3] - a[0][4]*a[2][2]*a[3][3]*a[4][1] - a[0][4]*a[2][3]*a[3][1]*a[4][2] + a[0][4]*a[2][3]*a[3][2]*a[4][1]);
    cof_out[0][2] = (a[0][1]*a[1][2]*a[3][3]*a[4][4] - a[0][1]*a[1][2]*a[3][4]*a[4][3] - a[0][1]*a[1][3]*a[3][2]*a[4][4] + a[0][1]*a[1][3]*a[3][4]*a[4][2] + a[0][1]*a[1][4]*a[3][2]*a[4][3] - a[0][1]*a[1][4]*a[3][3]*a[4][2] - a[0][2]*a[1][1]*a[3][3]*a[4][4] + a[0][2]*a[1][1]*a[3][4]*a[4][3] + a[0][2]*a[1][3]*a[3][1]*a[4][4] - a[0][2]*a[1][3]*a[3][4]*a[4][1] - a[0][2]*a[1][4]*a[3][1]*a[4][3] + a[0][2]*a[1][4]*a[3][3]*a[4][1] + a[0][3]*a[1][1]*a[3][2]*a[4][4] - a[0][3]*a[1][1]*a[3][4]*a[4][2] - a[0][3]*a[1][2]*a[3][1]*a[4][4] + a[0][3]*a[1][2]*a[3][4]*a[4][1] + a[0][3]*a[1][4]*a[3][1]*a[4][2] - a[0][3]*a[1][4]*a[3][2]*a[4][1] - a[0][4]*a[1][1]*a[3][2]*a[4][3] + a[0][4]*a[1][1]*a[3][3]*a[4][2] + a[0][4]*a[1][2]*a[3][1]*a[4][3] - a[0][4]*a[1][2]*a[3][3]*a[4][1] - a[0][4]*a[1][3]*a[3][1]*a[4][2] + a[0][4]*a[1][3]*a[3][2]*a[4][1]);
    cof_out[0][3] = -(a[0][1]*a[1][2]*a[2][3]*a[4][4] - a[0][1]*a[1][2]*a[2][4]*a[4][3] - a[0][1]*a[1][3]*a[2][2]*a[4][4] + a[0][1]*a[1][3]*a[2][4]*a[4][2] + a[0][1]*a[1][4]*a[2][2]*a[4][3] - a[0][1]*a[1][4]*a[2][3]*a[4][2] - a[0][2]*a[1][1]*a[2][3]*a[4][4] + a[0][2]*a[1][1]*a[2][4]*a[4][3] + a[0][2]*a[1][3]*a[2][1]*a[4][4] - a[0][2]*a[1][3]*a[2][4]*a[4][1] - a[0][2]*a[1][4]*a[2][1]*a[4][3] + a[0][2]*a[1][4]*a[2][3]*a[4][1] + a[0][3]*a[1][1]*a[2][2]*a[4][4] - a[0][3]*a[1][1]*a[2][4]*a[4][2] - a[0][3]*a[1][2]*a[2][1]*a[4][4] + a[0][3]*a[1][2]*a[2][4]*a[4][1] + a[0][3]*a[1][4]*a[2][1]*a[4][2] - a[0][3]*a[1][4]*a[2][2]*a[4][1] - a[0][4]*a[1][1]*a[2][2]*a[4][3] + a[0][4]*a[1][1]*a[2][3]*a[4][2] + a[0][4]*a[1][2]*a[2][1]*a[4][3] - a[0][4]*a[1][2]*a[2][3]*a[4][1] - a[0][4]*a[1][3]*a[2][1]*a[4][2] + a[0][4]*a[1][3]*a[2][2]*a[4][1]);
    cof_out[0][4] = (a[0][1]*a[1][2]*a[2][3]*a[3][4] - a[0][1]*a[1][2]*a[2][4]*a[3][3] - a[0][1]*a[1][3]*a[2][2]*a[3][4] + a[0][1]*a[1][3]*a[2][4]*a[3][2] + a[0][1]*a[1][4]*a[2][2]*a[3][3] - a[0][1]*a[1][4]*a[2][3]*a[3][2] - a[0][2]*a[1][1]*a[2][3]*a[3][4] + a[0][2]*a[1][1]*a[2][4]*a[3][3] + a[0][2]*a[1][3]*a[2][1]*a[3][4] - a[0][2]*a[1][3]*a[2][4]*a[3][1] - a[0][2]*a[1][4]*a[2][1]*a[3][3] + a[0][2]*a[1][4]*a[2][3]*a[3][1] + a[0][3]*a[1][1]*a[2][2]*a[3][4] - a[0][3]*a[1][1]*a[2][4]*a[3][2] - a[0][3]*a[1][2]*a[2][1]*a[3][4] + a[0][3]*a[1][2]*a[2][4]*a[3][1] + a[0][3]*a[1][4]*a[2][1]*a[3][2] - a[0][3]*a[1][4]*a[2][2]*a[3][1] - a[0][4]*a[1][1]*a[2][2]*a[3][3] + a[0][4]*a[1][1]*a[2][3]*a[3][2] + a[0][4]*a[1][2]*a[2][1]*a[3][3] - a[0][4]*a[1][2]*a[2][3]*a[3][1] - a[0][4]*a[1][3]*a[2][1]*a[3][2] + a[0][4]*a[1][3]*a[2][2]*a[3][1]);
    cof_out[1][0] = -(a[1][0]*a[2][2]*a[3][3]*a[4][4] - a[1][0]*a[2][2]*a[3][4]*a[4][3] - a[1][0]*a[2][3]*a[3][2]*a[4][4] + a[1][0]*a[2][3]*a[3][4]*a[4][2] + a[1][0]*a[2][4]*a[3][2]*a[4][3] - a[1][0]*a[2][4]*a[3][3]*a[4][2] - a[1][2]*a[2][0]*a[3][3]*a[4][4] + a[1][2]*a[2][0]*a[3][4]*a[4][3] + a[1][2]*a[2][3]*a[3][0]*a[4][4] - a[1][2]*a[2][3]*a[3][4]*a[4][0] - a[1][2]*a[2][4]*a[3][0]*a[4][3] + a[1][2]*a[2][4]*a[3][3]*a[4][0] + a[1][3]*a[2][0]*a[3][2]*a[4][4] - a[1][3]*a[2][0]*a[3][4]*a[4][2] - a[1][3]*a[2][2]*a[3][0]*a[4][4] + a[1][3]*a[2][2]*a[3][4]*a[4][0] + a[1][3]*a[2][4]*a[3][0]*a[4][2] - a[1][3]*a[2][4]*a[3][2]*a[4][0] - a[1][4]*a[2][0]*a[3][2]*a[4][3] + a[1][4]*a[2][0]*a[3][3]*a[4][2] + a[1][4]*a[2][2]*a[3][0]*a[4][3] - a[1][4]*a[2][2]*a[3][3]*a[4][0] - a[1][4]*a[2][3]*a[3][0]*a[4][2] + a[1][4]*a[2][3]*a[3][2]*a[4][0]);
    cof_out[1][1] = (a[0][0]*a[2][2]*a[3][3]*a[4][4] - a[0][0]*a[2][2]*a[3][4]*a[4][3] - a[0][0]*a[2][3]*a[3][2]*a[4][4] + a[0][0]*a[2][3]*a[3][4]*a[4][2] + a[0][0]*a[2][4]*a[3][2]*a[4][3] - a[0][0]*a[2][4]*a[3][3]*a[4][2] - a[0][2]*a[2][0]*a[3][3]*a[4][4] + a[0][2]*a[2][0]*a[3][4]*a[4][3] + a[0][2]*a[2][3]*a[3][0]*a[4][4] - a[0][2]*a[2][3]*a[3][4]*a[4][0] - a[0][2]*a[2][4]*a[3][0]*a[4][3] + a[0][2]*a[2][4]*a[3][3]*a[4][0] + a[0][3]*a[2][0]*a[3][2]*a[4][4] - a[0][3]*a[2][0]*a[3][4]*a[4][2] - a[0][3]*a[2][2]*a[3][0]*a[4][4] + a[0][3]*a[2][2]*a[3][4]*a[4][0] + a[0][3]*a[2][4]*a[3][0]*a[4][2] - a[0][3]*a[2][4]*a[3][2]*a[4][0] - a[0][4]*a[2][0]*a[3][2]*a[4][3] + a[0][4]*a[2][0]*a[3][3]*a[4][2] + a[0][4]*a[2][2]*a[3][0]*a[4][3] - a[0][4]*a[2][2]*a[3][3]*a[4][0] - a[0][4]*a[2][3]*a[3][0]*a[4][2] + a[0][4]*a[2][3]*a[3][2]*a[4][0]);
    cof_out[1][2] = -(a[0][0]*a[1][2]*a[3][3]*a[4][4] - a[0][0]*a[1][2]*a[3][4]*a[4][3] - a[0][0]*a[1][3]*a[3][2]*a[4][4] + a[0][0]*a[1][3]*a[3][4]*a[4][2] + a[0][0]*a[1][4]*a[3][2]*a[4][3] - a[0][0]*a[1][4]*a[3][3]*a[4][2] - a[0][2]*a[1][0]*a[3][3]*a[4][4] + a[0][2]*a[1][0]*a[3][4]*a[4][3] + a[0][2]*a[1][3]*a[3][0]*a[4][4] - a[0][2]*a[1][3]*a[3][4]*a[4][0] - a[0][2]*a[1][4]*a[3][0]*a[4][3] + a[0][2]*a[1][4]*a[3][3]*a[4][0] + a[0][3]*a[1][0]*a[3][2]*a[4][4] - a[0][3]*a[1][0]*a[3][4]*a[4][2] - a[0][3]*a[1][2]*a[3][0]*a[4][4] + a[0][3]*a[1][2]*a[3][4]*a[4][0] + a[0][3]*a[1][4]*a[3][0]*a[4][2] - a[0][3]*a[1][4]*a[3][2]*a[4][0] - a[0][4]*a[1][0]*a[3][2]*a[4][3] + a[0][4]*a[1][0]*a[3][3]*a[4][2] + a[0][4]*a[1][2]*a[3][0]*a[4][3] - a[0][4]*a[1][2]*a[3][3]*a[4][0] - a[0][4]*a[1][3]*a[3][0]*a[4][2] + a[0][4]*a[1][3]*a[3][2]*a[4][0]);
    cof_out[1][3] = (a[0][0]*a[1][2]*a[2][3]*a[4][4] - a[0][0]*a[1][2]*a[2][4]*a[4][3] - a[0][0]*a[1][3]*a[2][2]*a[4][4] + a[0][0]*a[1][3]*a[2][4]*a[4][2] + a[0][0]*a[1][4]*a[2][2]*a[4][3] - a[0][0]*a[1][4]*a[2][3]*a[4][2] - a[0][2]*a[1][0]*a[2][3]*a[4][4] + a[0][2]*a[1][0]*a[2][4]*a[4][3] + a[0][2]*a[1][3]*a[2][0]*a[4][4] - a[0][2]*a[1][3]*a[2][4]*a[4][0] - a[0][2]*a[1][4]*a[2][0]*a[4][3] + a[0][2]*a[1][4]*a[2][3]*a[4][0] + a[0][3]*a[1][0]*a[2][2]*a[4][4] - a[0][3]*a[1][0]*a[2][4]*a[4][2] - a[0][3]*a[1][2]*a[2][0]*a[4][4] + a[0][3]*a[1][2]*a[2][4]*a[4][0] + a[0][3]*a[1][4]*a[2][0]*a[4][2] - a[0][3]*a[1][4]*a[2][2]*a[4][0] - a[0][4]*a[1][0]*a[2][2]*a[4][3] + a[0][4]*a[1][0]*a[2][3]*a[4][2] + a[0][4]*a[1][2]*a[2][0]*a[4][3] - a[0][4]*a[1][2]*a[2][3]*a[4][0] - a[0][4]*a[1][3]*a[2][0]*a[4][2] + a[0][4]*a[1][3]*a[2][2]*a[4][0]);
    cof_out[1][4] = -(a[0][0]*a[1][2]*a[2][3]*a[3][4] - a[0][0]*a[1][2]*a[2][4]*a[3][3] - a[0][0]*a[1][3]*a[2][2]*a[3][4] + a[0][0]*a[1][3]*a[2][4]*a[3][2] + a[0][0]*a[1][4]*a[2][2]*a[3][3] - a[0][0]*a[1][4]*a[2][3]*a[3][2] - a[0][2]*a[1][0]*a[2][3]*a[3][4] + a[0][2]*a[1][0]*a[2][4]*a[3][3] + a[0][2]*a[1][3]*a[2][0]*a[3][4] - a[0][2]*a[1][3]*a[2][4]*a[3][0] - a[0][2]*a[1][4]*a[2][0]*a[3][3] + a[0][2]*a[1][4]*a[2][3]*a[3][0] + a[0][3]*a[1][0]*a[2][2]*a[3][4] - a[0][3]*a[1][0]*a[2][4]*a[3][2] - a[0][3]*a[1][2]*a[2][0]*a[3][4] + a[0][3]*a[1][2]*a[2][4]*a[3][0] + a[0][3]*a[1][4]*a[2][0]*a[3][2] - a[0][3]*a[1][4]*a[2][2]*a[3][0] - a[0][4]*a[1][0]*a[2][2]*a[3][3] + a[0][4]*a[1][0]*a[2][3]*a[3][2] + a[0][4]*a[1][2]*a[2][0]*a[3][3] - a[0][4]*a[1][2]*a[2][3]*a[3][0] - a[0][4]*a[1][3]*a[2][0]*a[3][2] + a[0][4]*a[1][3]*a[2][2]*a[3][0]);
    cof_out[2][0] = (a[1][0]*a[2][1]*a[3][3]*a[4][4] - a[1][0]*a[2][1]*a[3][4]*a[4][3] - a[1][0]*a[2][3]*a[3][1]*a[4][4] + a[1][0]*a[2][3]*a[3][4]*a[4][1] + a[1][0]*a[2][4]*a[3][1]*a[4][3] - a[1][0]*a[2][4]*a[3][3]*a[4][1] - a[1][1]*a[2][0]*a[3][3]*a[4][4] + a[1][1]*a[2][0]*a[3][4]*a[4][3] + a[1][1]*a[2][3]*a[3][0]*a[4][4] - a[1][1]*a[2][3]*a[3][4]*a[4][0] - a[1][1]*a[2][4]*a[3][0]*a[4][3] + a[1][1]*a[2][4]*a[3][3]*a[4][0] + a[1][3]*a[2][0]*a[3][1]*a[4][4] - a[1][3]*a[2][0]*a[3][4]*a[4][1] - a[1][3]*a[2][1]*a[3][0]*a[4][4] + a[1][3]*a[2][1]*a[3][4]*a[4][0] + a[1][3]*a[2][4]*a[3][0]*a[4][1] - a[1][3]*a[2][4]*a[3][1]*a[4][0] - a[1][4]*a[2][0]*a[3][1]*a[4][3] + a[1][4]*a[2][0]*a[3][3]*a[4][1] + a[1][4]*a[2][1]*a[3][0]*a[4][3] - a[1][4]*a[2][1]*a[3][3]*a[4][0] - a[1][4]*a[2][3]*a[3][0]*a[4][1] + a[1][4]*a[2][3]*a[3][1]*a[4][0]);
    cof_out[2][1] = -(a[0][0]*a[2][1]*a[3][3]*a[4][4] - a[0][0]*a[2][1]*a[3][4]*a[4][3] - a[0][0]*a[2][3]*a[3][1]*a[4][4] + a[0][0]*a[2][3]*a[3][4]*a[4][1] + a[0][0]*a[2][4]*a[3][1]*a[4][3] - a[0][0]*a[2][4]*a[3][3]*a[4][1] - a[0][1]*a[2][0]*a[3][3]*a[4][4] + a[0][1]*a[2][0]*a[3][4]*a[4][3] + a[0][1]*a[2][3]*a[3][0]*a[4][4] - a[0][1]*a[2][3]*a[3][4]*a[4][0] - a[0][1]*a[2][4]*a[3][0]*a[4][3] + a[0][1]*a[2][4]*a[3][3]*a[4][0] + a[0][3]*a[2][0]*a[3][1]*a[4][4] - a[0][3]*a[2][0]*a[3][4]*a[4][1] - a[0][3]*a[2][1]*a[3][0]*a[4][4] + a[0][3]*a[2][1]*a[3][4]*a[4][0] + a[0][3]*a[2][4]*a[3][0]*a[4][1] - a[0][3]*a[2][4]*a[3][1]*a[4][0] - a[0][4]*a[2][0]*a[3][1]*a[4][3] + a[0][4]*a[2][0]*a[3][3]*a[4][1] + a[0][4]*a[2][1]*a[3][0]*a[4][3] - a[0][4]*a[2][1]*a[3][3]*a[4][0] - a[0][4]*a[2][3]*a[3][0]*a[4][1] + a[0][4]*a[2][3]*a[3][1]*a[4][0]);
    cof_out[2][2] = (a[0][0]*a[1][1]*a[3][3]*a[4][4] - a[0][0]*a[1][1]*a[3][4]*a[4][3] - a[0][0]*a[1][3]*a[3][1]*a[4][4] + a[0][0]*a[1][3]*a[3][4]*a[4][1] + a[0][0]*a[1][4]*a[3][1]*a[4][3] - a[0][0]*a[1][4]*a[3][3]*a[4][1] - a[0][1]*a[1][0]*a[3][3]*a[4][4] + a[0][1]*a[1][0]*a[3][4]*a[4][3] + a[0][1]*a[1][3]*a[3][0]*a[4][4] - a[0][1]*a[1][3]*a[3][4]*a[4][0] - a[0][1]*a[1][4]*a[3][0]*a[4][3] + a[0][1]*a[1][4]*a[3][3]*a[4][0] + a[0][3]*a[1][0]*a[3][1]*a[4][4] - a[0][3]*a[1][0]*a[3][4]*a[4][1] - a[0][3]*a[1][1]*a[3][0]*a[4][4] + a[0][3]*a[1][1]*a[3][4]*a[4][0] + a[0][3]*a[1][4]*a[3][0]*a[4][1] - a[0][3]*a[1][4]*a[3][1]*a[4][0] - a[0][4]*a[1][0]*a[3][1]*a[4][3] + a[0][4]*a[1][0]*a[3][3]*a[4][1] + a[0][4]*a[1][1]*a[3][0]*a[4][3] - a[0][4]*a[1][1]*a[3][3]*a[4][0] - a[0][4]*a[1][3]*a[3][0]*a[4][1] + a[0][4]*a[1][3]*a[3][1]*a[4][0]);
    cof_out[2][3] = -(a[0][0]*a[1][1]*a[2][3]*a[4][4] - a[0][0]*a[1][1]*a[2][4]*a[4][3] - a[0][0]*a[1][3]*a[2][1]*a[4][4] + a[0][0]*a[1][3]*a[2][4]*a[4][1] + a[0][0]*a[1][4]*a[2][1]*a[4][3] - a[0][0]*a[1][4]*a[2][3]*a[4][1] - a[0][1]*a[1][0]*a[2][3]*a[4][4] + a[0][1]*a[1][0]*a[2][4]*a[4][3] + a[0][1]*a[1][3]*a[2][0]*a[4][4] - a[0][1]*a[1][3]*a[2][4]*a[4][0] - a[0][1]*a[1][4]*a[2][0]*a[4][3] + a[0][1]*a[1][4]*a[2][3]*a[4][0] + a[0][3]*a[1][0]*a[2][1]*a[4][4] - a[0][3]*a[1][0]*a[2][4]*a[4][1] - a[0][3]*a[1][1]*a[2][0]*a[4][4] + a[0][3]*a[1][1]*a[2][4]*a[4][0] + a[0][3]*a[1][4]*a[2][0]*a[4][1] - a[0][3]*a[1][4]*a[2][1]*a[4][0] - a[0][4]*a[1][0]*a[2][1]*a[4][3] + a[0][4]*a[1][0]*a[2][3]*a[4][1] + a[0][4]*a[1][1]*a[2][0]*a[4][3] - a[0][4]*a[1][1]*a[2][3]*a[4][0] - a[0][4]*a[1][3]*a[2][0]*a[4][1] + a[0][4]*a[1][3]*a[2][1]*a[4][0]);
    cof_out[2][4] = (a[0][0]*a[1][1]*a[2][3]*a[3][4] - a[0][0]*a[1][1]*a[2][4]*a[3][3] - a[0][0]*a[1][3]*a[2][1]*a[3][4] + a[0][0]*a[1][3]*a[2][4]*a[3][1] + a[0][0]*a[1][4]*a[2][1]*a[3][3] - a[0][0]*a[1][4]*a[2][3]*a[3][1] - a[0][1]*a[1][0]*a[2][3]*a[3][4] + a[0][1]*a[1][0]*a[2][4]*a[3][3] + a[0][1]*a[1][3]*a[2][0]*a[3][4] - a[0][1]*a[1][3]*a[2][4]*a[3][0] - a[0][1]*a[1][4]*a[2][0]*a[3][3] + a[0][1]*a[1][4]*a[2][3]*a[3][0] + a[0][3]*a[1][0]*a[2][1]*a[3][4] - a[0][3]*a[1][0]*a[2][4]*a[3][1] - a[0][3]*a[1][1]*a[2][0]*a[3][4] + a[0][3]*a[1][1]*a[2][4]*a[3][0] + a[0][3]*a[1][4]*a[2][0]*a[3][1] - a[0][3]*a[1][4]*a[2][1]*a[3][0] - a[0][4]*a[1][0]*a[2][1]*a[3][3] + a[0][4]*a[1][0]*a[2][3]*a[3][1] + a[0][4]*a[1][1]*a[2][0]*a[3][3] - a[0][4]*a[1][1]*a[2][3]*a[3][0] - a[0][4]*a[1][3]*a[2][0]*a[3][1] + a[0][4]*a[1][3]*a[2][1]*a[3][0]);
    cof_out[3][0] = -(a[1][0]*a[2][1]*a[3][2]*a[4][4] - a[1][0]*a[2][1]*a[3][4]*a[4][2] - a[1][0]*a[2][2]*a[3][1]*a[4][4] + a[1][0]*a[2][2]*a[3][4]*a[4][1] + a[1][0]*a[2][4]*a[3][1]*a[4][2] - a[1][0]*a[2][4]*a[3][2]*a[4][1] - a[1][1]*a[2][0]*a[3][2]*a[4][4] + a[1][1]*a[2][0]*a[3][4]*a[4][2] + a[1][1]*a[2][2]*a[3][0]*a[4][4] - a[1][1]*a[2][2]*a[3][4]*a[4][0] - a[1][1]*a[2][4]*a[3][0]*a[4][2] + a[1][1]*a[2][4]*a[3][2]*a[4][0] + a[1][2]*a[2][0]*a[3][1]*a[4][4] - a[1][2]*a[2][0]*a[3][4]*a[4][1] - a[1][2]*a[2][1]*a[3][0]*a[4][4] + a[1][2]*a[2][1]*a[3][4]*a[4][0] + a[1][2]*a[2][4]*a[3][0]*a[4][1] - a[1][2]*a[2][4]*a[3][1]*a[4][0] - a[1][4]*a[2][0]*a[3][1]*a[4][2] + a[1][4]*a[2][0]*a[3][2]*a[4][1] + a[1][4]*a[2][1]*a[3][0]*a[4][2] - a[1][4]*a[2][1]*a[3][2]*a[4][0] - a[1][4]*a[2][2]*a[3][0]*a[4][1] + a[1][4]*a[2][2]*a[3][1]*a[4][0]);
    cof_out[3][1] = (a[0][0]*a[2][1]*a[3][2]*a[4][4] - a[0][0]*a[2][1]*a[3][4]*a[4][2] - a[0][0]*a[2][2]*a[3][1]*a[4][4] + a[0][0]*a[2][2]*a[3][4]*a[4][1] + a[0][0]*a[2][4]*a[3][1]*a[4][2] - a[0][0]*a[2][4]*a[3][2]*a[4][1] - a[0][1]*a[2][0]*a[3][2]*a[4][4] + a[0][1]*a[2][0]*a[3][4]*a[4][2] + a[0][1]*a[2][2]*a[3][0]*a[4][4] - a[0][1]*a[2][2]*a[3][4]*a[4][0] - a[0][1]*a[2][4]*a[3][0]*a[4][2] + a[0][1]*a[2][4]*a[3][2]*a[4][0] + a[0][2]*a[2][0]*a[3][1]*a[4][4] - a[0][2]*a[2][0]*a[3][4]*a[4][1] - a[0][2]*a[2][1]*a[3][0]*a[4][4] + a[0][2]*a[2][1]*a[3][4]*a[4][0] + a[0][2]*a[2][4]*a[3][0]*a[4][1] - a[0][2]*a[2][4]*a[3][1]*a[4][0] - a[0][4]*a[2][0]*a[3][1]*a[4][2] + a[0][4]*a[2][0]*a[3][2]*a[4][1] + a[0][4]*a[2][1]*a[3][0]*a[4][2] - a[0][4]*a[2][1]*a[3][2]*a[4][0] - a[0][4]*a[2][2]*a[3][0]*a[4][1] + a[0][4]*a[2][2]*a[3][1]*a[4][0]);
    cof_out[3][2] = -(a[0][0]*a[1][1]*a[3][2]*a[4][4] - a[0][0]*a[1][1]*a[3][4]*a[4][2] - a[0][0]*a[1][2]*a[3][1]*a[4][4] + a[0][0]*a[1][2]*a[3][4]*a[4][1] + a[0][0]*a[1][4]*a[3][1]*a[4][2] - a[0][0]*a[1][4]*a[3][2]*a[4][1] - a[0][1]*a[1][0]*a[3][2]*a[4][4] + a[0][1]*a[1][0]*a[3][4]*a[4][2] + a[0][1]*a[1][2]*a[3][0]*a[4][4] - a[0][1]*a[1][2]*a[3][4]*a[4][0] - a[0][1]*a[1][4]*a[3][0]*a[4][2] + a[0][1]*a[1][4]*a[3][2]*a[4][0] + a[0][2]*a[1][0]*a[3][1]*a[4][4] - a[0][2]*a[1][0]*a[3][4]*a[4][1] - a[0][2]*a[1][1]*a[3][0]*a[4][4] + a[0][2]*a[1][1]*a[3][4]*a[4][0] + a[0][2]*a[1][4]*a[3][0]*a[4][1] - a[0][2]*a[1][4]*a[3][1]*a[4][0] - a[0][4]*a[1][0]*a[3][1]*a[4][2] + a[0][4]*a[1][0]*a[3][2]*a[4][1] + a[0][4]*a[1][1]*a[3][0]*a[4][2] - a[0][4]*a[1][1]*a[3][2]*a[4][0] - a[0][4]*a[1][2]*a[3][0]*a[4][1] + a[0][4]*a[1][2]*a[3][1]*a[4][0]);
    cof_out[3][3] = (a[0][0]*a[1][1]*a[2][2]*a[4][4] - a[0][0]*a[1][1]*a[2][4]*a[4][2] - a[0][0]*a[1][2]*a[2][1]*a[4][4] + a[0][0]*a[1][2]*a[2][4]*a[4][1] + a[0][0]*a[1][4]*a[2][1]*a[4][2] - a[0][0]*a[1][4]*a[2][2]*a[4][1] - a[0][1]*a[1][0]*a[2][2]*a[4][4] + a[0][1]*a[1][0]*a[2][4]*a[4][2] + a[0][1]*a[1][2]*a[2][0]*a[4][4] - a[0][1]*a[1][2]*a[2][4]*a[4][0] - a[0][1]*a[1][4]*a[2][0]*a[4][2] + a[0][1]*a[1][4]*a[2][2]*a[4][0] + a[0][2]*a[1][0]*a[2][1]*a[4][4] - a[0][2]*a[1][0]*a[2][4]*a[4][1] - a[0][2]*a[1][1]*a[2][0]*a[4][4] + a[0][2]*a[1][1]*a[2][4]*a[4][0] + a[0][2]*a[1][4]*a[2][0]*a[4][1] - a[0][2]*a[1][4]*a[2][1]*a[4][0] - a[0][4]*a[1][0]*a[2][1]*a[4][2] + a[0][4]*a[1][0]*a[2][2]*a[4][1] + a[0][4]*a[1][1]*a[2][0]*a[4][2] - a[0][4]*a[1][1]*a[2][2]*a[4][0] - a[0][4]*a[1][2]*a[2][0]*a[4][1] + a[0][4]*a[1][2]*a[2][1]*a[4][0]);
    cof_out[3][4] = -(a[0][0]*a[1][1]*a[2][2]*a[3][4] - a[0][0]*a[1][1]*a[2][4]*a[3][2] - a[0][0]*a[1][2]*a[2][1]*a[3][4] + a[0][0]*a[1][2]*a[2][4]*a[3][1] + a[0][0]*a[1][4]*a[2][1]*a[3][2] - a[0][0]*a[1][4]*a[2][2]*a[3][1] - a[0][1]*a[1][0]*a[2][2]*a[3][4] + a[0][1]*a[1][0]*a[2][4]*a[3][2] + a[0][1]*a[1][2]*a[2][0]*a[3][4] - a[0][1]*a[1][2]*a[2][4]*a[3][0] - a[0][1]*a[1][4]*a[2][0]*a[3][2] + a[0][1]*a[1][4]*a[2][2]*a[3][0] + a[0][2]*a[1][0]*a[2][1]*a[3][4] - a[0][2]*a[1][0]*a[2][4]*a[3][1] - a[0][2]*a[1][1]*a[2][0]*a[3][4] + a[0][2]*a[1][1]*a[2][4]*a[3][0] + a[0][2]*a[1][4]*a[2][0]*a[3][1] - a[0][2]*a[1][4]*a[2][1]*a[3][0] - a[0][4]*a[1][0]*a[2][1]*a[3][2] + a[0][4]*a[1][0]*a[2][2]*a[3][1] + a[0][4]*a[1][1]*a[2][0]*a[3][2] - a[0][4]*a[1][1]*a[2][2]*a[3][0] - a[0][4]*a[1][2]*a[2][0]*a[3][1] + a[0][4]*a[1][2]*a[2][1]*a[3][0]);
    cof_out[4][0] = (a[1][0]*a[2][1]*a[3][2]*a[4][3] - a[1][0]*a[2][1]*a[3][3]*a[4][2] - a[1][0]*a[2][2]*a[3][1]*a[4][3] + a[1][0]*a[2][2]*a[3][3]*a[4][1] + a[1][0]*a[2][3]*a[3][1]*a[4][2] - a[1][0]*a[2][3]*a[3][2]*a[4][1] - a[1][1]*a[2][0]*a[3][2]*a[4][3] + a[1][1]*a[2][0]*a[3][3]*a[4][2] + a[1][1]*a[2][2]*a[3][0]*a[4][3] - a[1][1]*a[2][2]*a[3][3]*a[4][0] - a[1][1]*a[2][3]*a[3][0]*a[4][2] + a[1][1]*a[2][3]*a[3][2]*a[4][0] + a[1][2]*a[2][0]*a[3][1]*a[4][3] - a[1][2]*a[2][0]*a[3][3]*a[4][1] - a[1][2]*a[2][1]*a[3][0]*a[4][3] + a[1][2]*a[2][1]*a[3][3]*a[4][0] + a[1][2]*a[2][3]*a[3][0]*a[4][1] - a[1][2]*a[2][3]*a[3][1]*a[4][0] - a[1][3]*a[2][0]*a[3][1]*a[4][2] + a[1][3]*a[2][0]*a[3][2]*a[4][1] + a[1][3]*a[2][1]*a[3][0]*a[4][2] - a[1][3]*a[2][1]*a[3][2]*a[4][0] - a[1][3]*a[2][2]*a[3][0]*a[4][1] + a[1][3]*a[2][2]*a[3][1]*a[4][0]);
    cof_out[4][1] = -(a[0][0]*a[2][1]*a[3][2]*a[4][3] - a[0][0]*a[2][1]*a[3][3]*a[4][2] - a[0][0]*a[2][2]*a[3][1]*a[4][3] + a[0][0]*a[2][2]*a[3][3]*a[4][1] + a[0][0]*a[2][3]*a[3][1]*a[4][2] - a[0][0]*a[2][3]*a[3][2]*a[4][1] - a[0][1]*a[2][0]*a[3][2]*a[4][3] + a[0][1]*a[2][0]*a[3][3]*a[4][2] + a[0][1]*a[2][2]*a[3][0]*a[4][3] - a[0][1]*a[2][2]*a[3][3]*a[4][0] - a[0][1]*a[2][3]*a[3][0]*a[4][2] + a[0][1]*a[2][3]*a[3][2]*a[4][0] + a[0][2]*a[2][0]*a[3][1]*a[4][3] - a[0][2]*a[2][0]*a[3][3]*a[4][1] - a[0][2]*a[2][1]*a[3][0]*a[4][3] + a[0][2]*a[2][1]*a[3][3]*a[4][0] + a[0][2]*a[2][3]*a[3][0]*a[4][1] - a[0][2]*a[2][3]*a[3][1]*a[4][0] - a[0][3]*a[2][0]*a[3][1]*a[4][2] + a[0][3]*a[2][0]*a[3][2]*a[4][1] + a[0][3]*a[2][1]*a[3][0]*a[4][2] - a[0][3]*a[2][1]*a[3][2]*a[4][0] - a[0][3]*a[2][2]*a[3][0]*a[4][1] + a[0][3]*a[2][2]*a[3][1]*a[4][0]);
    cof_out[4][2] = (a[0][0]*a[1][1]*a[3][2]*a[4][3] - a[0][0]*a[1][1]*a[3][3]*a[4][2] - a[0][0]*a[1][2]*a[3][1]*a[4][3] + a[0][0]*a[1][2]*a[3][3]*a[4][1] + a[0][0]*a[1][3]*a[3][1]*a[4][2] - a[0][0]*a[1][3]*a[3][2]*a[4][1] - a[0][1]*a[1][0]*a[3][2]*a[4][3] + a[0][1]*a[1][0]*a[3][3]*a[4][2] + a[0][1]*a[1][2]*a[3][0]*a[4][3] - a[0][1]*a[1][2]*a[3][3]*a[4][0] - a[0][1]*a[1][3]*a[3][0]*a[4][2] + a[0][1]*a[1][3]*a[3][2]*a[4][0] + a[0][2]*a[1][0]*a[3][1]*a[4][3] - a[0][2]*a[1][0]*a[3][3]*a[4][1] - a[0][2]*a[1][1]*a[3][0]*a[4][3] + a[0][2]*a[1][1]*a[3][3]*a[4][0] + a[0][2]*a[1][3]*a[3][0]*a[4][1] - a[0][2]*a[1][3]*a[3][1]*a[4][0] - a[0][3]*a[1][0]*a[3][1]*a[4][2] + a[0][3]*a[1][0]*a[3][2]*a[4][1] + a[0][3]*a[1][1]*a[3][0]*a[4][2] - a[0][3]*a[1][1]*a[3][2]*a[4][0] - a[0][3]*a[1][2]*a[3][0]*a[4][1] + a[0][3]*a[1][2]*a[3][1]*a[4][0]);
    cof_out[4][3] = -(a[0][0]*a[1][1]*a[2][2]*a[4][3] - a[0][0]*a[1][1]*a[2][3]*a[4][2] - a[0][0]*a[1][2]*a[2][1]*a[4][3] + a[0][0]*a[1][2]*a[2][3]*a[4][1] + a[0][0]*a[1][3]*a[2][1]*a[4][2] - a[0][0]*a[1][3]*a[2][2]*a[4][1] - a[0][1]*a[1][0]*a[2][2]*a[4][3] + a[0][1]*a[1][0]*a[2][3]*a[4][2] + a[0][1]*a[1][2]*a[2][0]*a[4][3] - a[0][1]*a[1][2]*a[2][3]*a[4][0] - a[0][1]*a[1][3]*a[2][0]*a[4][2] + a[0][1]*a[1][3]*a[2][2]*a[4][0] + a[0][2]*a[1][0]*a[2][1]*a[4][3] - a[0][2]*a[1][0]*a[2][3]*a[4][1] - a[0][2]*a[1][1]*a[2][0]*a[4][3] + a[0][2]*a[1][1]*a[2][3]*a[4][0] + a[0][2]*a[1][3]*a[2][0]*a[4][1] - a[0][2]*a[1][3]*a[2][1]*a[4][0] - a[0][3]*a[1][0]*a[2][1]*a[4][2] + a[0][3]*a[1][0]*a[2][2]*a[4][1] + a[0][3]*a[1][1]*a[2][0]*a[4][2] - a[0][3]*a[1][1]*a[2][2]*a[4][0] - a[0][3]*a[1][2]*a[2][0]*a[4][1] + a[0][3]*a[1][2]*a[2][1]*a[4][0]);
    cof_out[4][4] = (a[0][0]*a[1][1]*a[2][2]*a[3][3] - a[0][0]*a[1][1]*a[2][3]*a[3][2] - a[0][0]*a[1][2]*a[2][1]*a[3][3] + a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][1]*a[1][0]*a[2][2]*a[3][3] + a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][1]*a[1][2]*a[2][0]*a[3][3] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][1]*a[1][3]*a[2][2]*a[3][0] + a[0][2]*a[1][0]*a[2][1]*a[3][3] - a[0][2]*a[1][0]*a[2][3]*a[3][1] - a[0][2]*a[1][1]*a[2][0]*a[3][3] + a[0][2]*a[1][1]*a[2][3]*a[3][0] + a[0][2]*a[1][3]*a[2][0]*a[3][1] - a[0][2]*a[1][3]*a[2][1]*a[3][0] - a[0][3]*a[1][0]*a[2][1]*a[3][2] + a[0][3]*a[1][0]*a[2][2]*a[3][1] + a[0][3]*a[1][1]*a[2][0]*a[3][2] - a[0][3]*a[1][1]*a[2][2]*a[3][0] - a[0][3]*a[1][2]*a[2][0]*a[3][1] + a[0][3]*a[1][2]*a[2][1]*a[3][0]);
  }

    /**
   * Calculate values for an arbitrary point (no cached values).
   * @param itg_pt integration point
   * @param elem element
   * @param flags flags defining what values must be calculated
   * @param[out] vals output
   */
  static void calc_values(const ZEROPTV& itg_pt, const ElemNodes& elem_orig,
                          unsigned int flags, BasisValues<nbf, nsd>* vals) {
    double mat_data[5][5];
    double jacc_data[4][4];
    double cof_data[5][5];
    double determinant = 0.0;

    //
    // Setup the system of equations for the shape function. For a pentatope
    // element, each shape function is the linear function,
    //
    //        f_i(x,y,z,t) = a + bx + cy + dz + et
    //
    // With nodal positions A, B, C, D, E for the pentatope, we can setup (for
    // example) f_0 to be,
    //
    //        f_0(A) = 1
    //        f_0(B) = 0
    //        f_0(C) = 0
    //        f_0(D) = 0
    //        f_0(E) = 0
    //
    // The coefficients a,b,c,d,e are encoded into the mat_data matrix. Note
    // that a is encoded as the right most column for indexing convenience later.
    //

    for (int i = 0; i < nsd+1; i++) {
      for (int j = 0; j < nsd; j++) {
        mat_data[i][j] = elem_orig.node_pos(i)(j);
      }
      mat_data[i][nsd] = 1.0;
    }

    //
    // This calculates the inverse of mat_data. The solution vector for the 
    // coefficients can be calculated by extracting columns from the inverse.
    // This is because the RHS is the zero vector
    //

    calc_inv5x5(mat_data, determinant, cof_data);

    vals->itg_pt = itg_pt;

    //
    // Since the integration points are in iso-parametric space, the shape
    // functions evaluated at these points can be done in iso-parametric space.
    //

    vals->N[0] = 1 - itg_pt.x() - itg_pt.y() - itg_pt.z() - itg_pt.t();
    vals->N[1] = itg_pt.x();
    vals->N[2] = itg_pt.y();
    vals->N[3] = itg_pt.z();
    vals->N[4] = itg_pt.t();

    //
    // Same calc_position as other basis functions.
    //
    
    calc_position(itg_pt, vals->N, elem_orig, &vals->position);

    //
    // The first derivative is calculated by extracting the coefficients a,b,c,d,e
    // that are solutions to the above matrix system. The results are stored in
    // cof_data which *should* actually be the co-factor matrix **transposed**
    //

    if (flags & BASIS_FIRST_DERIVATIVE) {
      for (int bf = 0; bf < nbf; bf++) {
        for (int d = 0; d < nsd; d++) {
          vals->dN[bf][d] = cof_data[d][bf] / determinant;
        }
      }
    }

    //
    // The volume for a pentatop can be computed by taking the determinant of 
    // the 4x4 matrix resulting from translating pentatope so that one of its
    // nodes is at the origin. This is actually the jacobian for a pentatope.
    //

    for (int i = 0; i < nsd; i++) {
      for (int j = 0; j < nsd; j++) {
        jacc_data[i][j] = elem_orig.node_pos(j+1)(i) - elem_orig.node_pos(0)(i);
      }
    }

    //
    // The jacobian is just the 4x4 determinant of above. The weight for each 
    // integration point is 1/5*1/24 = 1/120. The 1/5 corresponds to equal weight
    // for all 5 points, and the 1/24 is a constant multiple on the determinant
    // of the jacobian to compute the volume for a pentatope.
    //
    // TODO(4D): The 1/24 is currently lumped into the jacc_x_weight variable
    // but I (Mike) am not sure if it should logically be part of the jacobian
    // instead. The current setup seems to produce correct results but it would
    // be good to look at this.
    //

    vals->jacobian = calc_det4x4(jacc_data);
    auto jacc_view = MatrixUtils::Matrix(jacc_data);
    calc_cof_t(jacc_view, vals->cof);
    vals->jacc_x_weight = vals->jacobian/120.0;

    //
    // Second derivative is all zeros.
    //

    if ((flags & BASIS_SECOND_DERIVATIVE) && (flags & BASIS_FIRST_DERIVATIVE)) {
      calc_d2N(vals->d2N);
    }
  }

  /**
   * Calculate position using sum(N[i] * node_pos[i])).
   * @param itg_pt unused
   * @param[in] n shape functions evaluated at itg_pt
   * @param elem element (where to grab node positions from)
   * @param[out] pos_out output
   */
   static void calc_position(
       const ZEROPTV& itg_pt, const double (&n)[nbf], const ElemNodes& elem,
       ZEROPTV* pos_out) {

    *pos_out = ZEROPTV(0, 0, 0, 0);
    
    for (int dir = 0; dir < MAX_DIM; dir++) {
      for (ElemNodeID a = 0; a < nbf; a++) {
        (*pos_out)(dir) += n[a] * elem.node_pos(a)(dir);
      }
    }
   }

  static const int d2_dim = nsd * (nsd + 1) / 2;

  static void calc_d2N(double (&d2n_out)[nbf][d2_dim]) {

    for (int bf = 0; bf < nbf; bf++) {
      for (int idx = 0; idx < d2_dim; idx++) {
        d2n_out[bf][idx] = 0.0;
      }
    }
  }
};

}  // namespace TALYFEMLIB
